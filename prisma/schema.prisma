// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  AUTHOR
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
  FREEZE
}

model User {
  id              Int       @id @default(autoincrement())
  firstName       String?   @db.VarChar(52)
  lastName        String?   @db.VarChar(52)
  phone           String    @db.VarChar(15)
  email           String?   @unique @db.VarChar(52)
  password        String
  role            Role      @default(USER)
  status          Status    @default(ACTIVE)
  lastLogin       DateTime?
  errorLoginCount Int       @default(0) @db.SmallInt
  randToken       String
  image           String?   @db.VarChar(225)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  posts           Post[]
  orders          Order[]
}

model Post {
  id         Int      @id @default(autoincrement())
  authorId   Int
  author     User     @relation(fields: [authorId], references: [id])
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  typeId     Int
  type       Type     @relation(fields: [typeId], references: [id])
  title      String   @db.VarChar(225)
  content    String
  body       String
  image      String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(52)
  posts    Post[]
  products Product[]
}

model Type {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(52)
  posts    Post[]
  products Product[]
}

model Product {
  id          Int               @id @default(autoincrement())
  categoryId  Int
  category    Category          @relation(fields: [categoryId], references: [id])
  typeId      Int
  type        Type              @relation(fields: [typeId], references: [id])
  name        String            @db.VarChar(255)
  description String            @db.VarChar(255)
  price       Decimal           @db.Decimal(10, 2)
  discount    Decimal           @default(0) @db.Decimal(10, 2)
  rating      Int               @default(0) @db.SmallInt
  inventory   Int               @default(0)
  status      Status            @default(ACTIVE)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  images      Image[]
  orders      ProductsOnOrder[]
}

model Image {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  path      String  @db.VarChar(255)
}

model Order {
  id         Int               @id @default(autoincrement())
  userId     Int
  user       User              @relation(fields: [userId], references: [id])
  code       String            @db.VarChar(15)
  totalPrice Decimal           @db.Decimal(10, 2)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  products   ProductsOnOrder[]
}

model ProductsOnOrder {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  price     Decimal @db.Decimal(10, 2)
  quantity  Int     @db.SmallInt
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(52)
  taggables Taggable[]
}

model Taggable {
  id     Int    @id @default(autoincrement())
  tagId  Int
  tag    Tag    @relation(fields: [tagId], references: [id])
  type   String @db.VarChar(7)
  typeId Int
}

model Otp {
  id            Int      @id @default(autoincrement())
  phone         String   @db.VarChar(15)
  otp           String   @db.VarChar(6)
  rememberToken String
  verifiedToken String?
  count         Int      @default(0) @db.SmallInt
  error         Int      @default(0) @db.SmallInt
  createdAt     DateTime @default(now())
  expiresAt     DateTime
}
